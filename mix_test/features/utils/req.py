# -*- coding: utf-8 -*-import simplejson as jsonimport urllibimport timeimport requestsimport sysimport osfrom features.utils.logger import *from features.steps.config import user_info, login_api, domainclass Request(object):    def __init__(self, req, user="", verify=False, allow_redirects=False,                 timeout=600.0):        self.url = req['url']        # 处理url        if self.url.startswith('http://') or self.url.startswith('https://'):            pass        else:            self.url = domain + "/" + self.url        self.params = req['params'] if 'params' in req else {}        self.headers = req['headers'] if 'headers' in req else {}        self.data = req['data'] if 'data' in req else {}        # 处理self.data数据        if isinstance(self.data, dict):            pass        elif isinstance(self.data, str):            tmp_list = self.data.split('&')            self.data = {}            for tmp in tmp_list:                t = tmp.split('=')                self.data[t[0]] = t[1]        else:            raise Exception("请求参数格式错误")        self.method = req['method']        # logger.info(self.url)        self.user = user        self.user_info = user_info[user] if user else ""        self.login_api = login_api        self.verify = verify        self.allow_redirects = allow_redirects        self.timeout = timeout        self.response = {}    def send_request(self):        if self.method not in ('get', 'post'):            raise Exception("Request method is:" + 'self.method')        response = requests.request(url=self.url, method=self.method, data=self.data, params=self.params,                                    headers=self.headers, verify=self.verify, allow_redirects=self.allow_redirects,                                    timeout=self.timeout)        self.response["headers"] = response.headers        self.response["status"] = response.status_code        # 格式化字符,暂时不用这样的方式        # self.response['body'] = response.text.encode('ascii', 'ignore').decode('ascii').strip()        self.response["body"] = json.loads(response.text.encode('raw_unicode_escape'))        # logger.info(type(self.response["body"]))        # self.response["body"] = json.dumps(response.text.encode('raw_unicode_escape'))        # 调试        # logger.info("response data - "+`self.response`)        # 暂时用不到        # result = str(self.response).replace("'", '"')        # self.response['history'] = response.history        return self.response    def send_request_with_login(self):        if self.method not in ('get', 'post'):            raise Exception("Request method is:" + 'self.method')        user_name = self.user        if os.path.isfile('login'):            # 从文件login_info中取{user_name:login_info}            file_r = open('login', 'r')            info_r = file_r.read()            if info_r:                login_dict = json.loads(info_r)            else:                login_dict = {}            file_r.close()            if login_dict.has_key(user_name):                login_info = login_dict[user_name]                # 请求接口                response = requests.request(url=self.url, method=self.method, data=self.data, params=self.params,                                            headers=self.headers, cookies=login_info, verify=self.verify,                                            allow_redirects=self.allow_redirects, timeout=self.timeout)                # 请求结果                self.response["headers"] = response.headers                self.response["status"] = response.status_code                self.response["body"] = json.loads(response.text.encode('raw_unicode_escape'))                # 判断是否登录成功                if self.response["body"].has_key("msg"):                    if self.response["body"]["msg"] == 'please login first.':                        # 登录                        login_resp = requests.Session().post(self.login_api, self.user_info)                        login_info = requests.utils.dict_from_cookiejar(login_resp.cookies)                        # 保存登录信息                        login_dict[user_name] = login_info                        file_w = open('login', 'w')                        info_w = json.dumps(login_dict)                        file_w.write(info_w)                        file_w.close()                        # 请求接口                        response = requests.request(url=self.url, method=self.method, data=self.data,                                                    params=self.params, headers=self.headers, cookies=login_info,                                                    verify=self.verify, allow_redirects=self.allow_redirects,                                                    timeout=self.timeout)                        # 请求结果                        self.response["headers"] = response.headers                        self.response["status"] = response.status_code                        self.response["body"] = json.loads(response.text.encode('raw_unicode_escape'))            else:                # 登录                login_resp = requests.Session().post(self.login_api, self.user_info)                login_info = requests.utils.dict_from_cookiejar(login_resp.cookies)                # 保存登录信息                login_dict[user_name] = login_info                file_w = open('login', 'w')                info_w = json.dumps(login_dict)                file_w.write(info_w)                file_w.close()                # 请求接口                response = requests.request(url=self.url, method=self.method, data=self.data, params=self.params,                                            headers=self.headers, cookies=login_info, verify=self.verify,                                            allow_redirects=self.allow_redirects, timeout=self.timeout)                # 请求结果                self.response["headers"] = response.headers                self.response["status"] = response.status_code                self.response["body"] = json.loads(response.text.encode('raw_unicode_escape'))        else:            # 登录            login_resp = requests.Session().post(self.login_api, self.user_info)            login_info = requests.utils.dict_from_cookiejar(login_resp.cookies)            # 保存登录信息            login_dict = {}            login_dict[user_name] = login_info            file_w = open('login', 'w')            info_w = json.dumps(login_dict)            file_w.write(info_w)            file_w.close()            # 请求接口            response = requests.request(url=self.url, method=self.method, data=self.data, params=self.params,                                        headers=self.headers, cookies=login_info, verify=self.verify,                                        allow_redirects=self.allow_redirects, timeout=self.timeout)            # 请求结果            self.response["headers"] = response.headers            self.response["status"] = response.status_code            self.response["body"] = json.loads(response.text.encode('raw_unicode_escape'))        # 调式        # logger.info(self.response["body"])        # logger.info(self.response)        return self.response